#!/usr/bin/env bash
# Usage: finatra new [package-name] [dest-dir] (defaults to current)
# Summary: creates a base project
# Help: Example: finatra new com.twitter.my_awesome_project ~/personal creates ~/personal/my_awesome_project
set -e


snapshot=false
if [ $(basename $0) = "finatra-new-dev" ]; then
  snapshot=true
  snapshot_version=$(xml sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:version" pom.xml)
fi

source $_FINATRA_ROOT/lib/base.sh

package_name=$1

if [ -z $package_name ]; then
  $_FINATRA_ROOT/bin/finatra help new
  exit
fi

root_path=$2

if [ -z $root_path ]; then
  root_path=.
fi

package_folders=$(echo $1 | sed -e 's/\./\//g')

project_name=$(basename $package_folders)

dest_path=$root_path/$project_name/src/main/scala/$package_folders
test_path=$root_path/$project_name/src/test/scala/$package_folders

group_id=$(echo $package_name | sed -e "s/\.[a-zA-Z0-9_-]*$//g")

year=$(date +%Y)

# check if dest exist
if [ -e $project_name ]; then
 echo "$project_name already exists, aborting"
 exit
fi

echo "creating project: $project_name"
mkdir -p $dest_path
mkdir -p $root_path/$project_name/src/main/resources
mkdir -p $root_path/$project_name/src/main/resources/public
mkdir -p $test_path

echo "  creating App.scala"
cp $_FINATRA_ROOT/share/App.scala $dest_path/
echo "  creating AppSpec.scala"
cp $_FINATRA_ROOT/share/AppSpec.scala $test_path/
echo "  creating pom.xml"
cp $_FINATRA_ROOT/share/pom.xml $root_path/$project_name/
echo "  creating build.sbt"
cp $_FINATRA_ROOT/share/build.sbt $root_path/$project_name/
echo "  creating README"
cp $_FINATRA_ROOT/share/README.markdown $root_path/$project_name/
echo "  creating Procfile"
cp $_FINATRA_ROOT/share/Procfile $root_path/$project_name/
echo "  creating .gitignore"
cp $_FINATRA_ROOT/share/.gitignore $root_path/$project_name/
echo "  creating .travis.yml"
cp $_FINATRA_ROOT/share/.travis.yml $root_path/$project_name/
echo "  creating an_view.mustache"
cp $_FINATRA_ROOT/../../src/main/resources/an_view.mustache $root_path/$project_name/src/main/resources/
echo "  creating dealwithit.gif"
cp $_FINATRA_ROOT/../../src/main/resources/public/dealwithit.gif $root_path/$project_name/src/main/resources/public/


# replace with latest example
replace_with_example_app $_FINATRA_ROOT/share/App.scala $dest_path/App.scala

# edit App.scala
sed -ie "s/###PACKAGE_NAME###/$package_name/g" $dest_path/App.scala

# edit Procfile
sed -ie "s/###PACKAGE_NAME###/$package_name/g" $root_path/$project_name/Procfile

# replace the spec with the latest example spec
replace_with_example_spec $_FINATRA_ROOT/share/AppSpec.scala $test_path/AppSpec.scala

# edit AppSpec.scala
sed -ie "s/###PACKAGE_NAME###/$package_name/g" $test_path/AppSpec.scala

# edit pom.xml
sed -ie "s/###PACKAGE_NAME###/$package_name/g" $root_path/$project_name/pom.xml
sed -ie "s/###YEAR###/$year/g" $root_path/$project_name/pom.xml
sed -ie "s/###GROUP_ID###/$group_id/g" $root_path/$project_name/pom.xml
sed -ie "s/###PROJECT_NAME###/$project_name/g" $root_path/$project_name/pom.xml

#edit build.sbt
sed -ie "s/###PROJECT_NAME###/$project_name/g" $root_path/$project_name/build.sbt


if [ $snapshot_version ]; then
  sed -ie "s/###VERSION###/$snapshot_version/g" $root_path/$project_name/pom.xml
else
  sed -ie "s/###VERSION###/$VERSION/g" $root_path/$project_name/pom.xml
fi

if [ $snapshot_version ]; then
  sed -ie "s/###VERSION###/$snapshot_version/g" $root_path/$project_name/build.sbt
else
  sed -ie "s/###VERSION###/$VERSION/g" $root_path/$project_name/build.sbt
fi

# delete backup files
rm -rf $root_path/$project_name/pom.xmle
rm -rf $dest_path/App.scalae
rm -rf $root_path/$project_name/Procfilee
rm -rf $test_path/AppSpec.scalae

echo "Done! run mvn scala:run to start your app"
